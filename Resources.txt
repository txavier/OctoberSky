 -- To enable OAuth2 the following guide was used.

	http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/

 -- After disabling https the website would not work.  This is because the require https attribute 
	([RequireHttps]) has to be disabled.  The below issue and problem resolution identifies a similar problem.

	http://stackoverflow.com/questions/18338368/unable-to-disable-ssl-for-website

 -- Bootstrap theme was downloaded from the below link.

	http://www.bootply.com

 -- Index theme provided by.

	http://www.bootstrapstage.com/agency-start/
	http://startbootstrap.com/template-overviews/agency/

 -- The following guide was used for code-first entity framework setup. 

	http://msdn.microsoft.com/en-us/data/jj591621.aspx#model

 -- ngAuthApp: attempt having give off

 -- Dubai photo for cover page.

	http://www.contrib.andrew.cmu.edu/~htasnim/qtraveldoha/img/holidaypackages/dubai-full.jpg
	http://www.contrib.andrew.cmu.edu/~htasnim/qtraveldoha/holidaypackages.html
	http://wallpaperscraft.com/download/beauty_city_dubai_lights_evening_water_58630/3840x1200

 -- For full screen video the following javascript package was used.

	http://bootsnipp.com/snippets/featured/ful-screen-video-background

 -- To create areas the following information was used.

	http://msdn.microsoft.com/en-us/library/ee671793(v=vs.100).aspx

 -- Underscore library to be implemented as per this link.

	https://www.airpair.com/angularjs/posts/top-10-mistakes-angularjs-developers-make

 -- To include the javascript underscore library use the following link.

	https://www.airpair.com/angularjs/posts/top-10-mistakes-angularjs-developers-make

 -- To deep watch a service variable the following implementation was used.

	http://stackoverflow.com/questions/12576798/how-to-watch-service-variables

 -- To get an angular service variable from another variable the following method was used.

	var serviceBase = '';

    dataService.getServerUrl().then(function (resource) {
        serviceBase = resource.authenticationServerUrl;
    });

 -- This website was used to transform json to .net classes

	http://json2csharp.com/

 -- For image file upload with drag and drop interface in Angular the following library was used.

	https://github.com/Wildhoney/ngDroplet

 -- To accept files as a post to a webapi the following information was used.

	http://stackoverflow.com/questions/10320232/how-to-accept-a-file-post-asp-net-mvc-4-webapi

 -- To retrieve jobject from a webapi call the following was used.

	http://blog.travisgosselin.com/web-api-signatures-with-multiple-complex-parameters/

	public IHttpActionResult Post(JObject jObject)
        {
            var thing = jObject["thing"].ToObject<thing>();

            var userName = jObject["userName"].ToObject<string>();

 -- To cascade on delete the following procedure was used. (As of the time of writing this still
	did not work though).

	http://stackoverflow.com/questions/17487577/entity-framework-ef-code-first-cascade-delete-for-one-to-zero-or-one-relations

 -- To fix the self-referencing loop bug the following code was used.

	http://stackoverflow.com/questions/17313632/self-referencing-loop-detected-getting-back-data-from-webapi-to-the-browser

 -- Google API

	https://code.google.com/apis/console/?noredirect&pli=1#project:915674078507:access

 -- ngDroplet was used for the file control in angular.

	https://github.com/Wildhoney/ngDroplet#image-previews

 -- To implement upvote and downvote buttons the following resources were used.

	http://meta.stackexchange.com/questions/57405/total-upvote-and-downvote-counts-are-incorrect

	http://meta.stackexchange.com/content/stackexchangemeta/img/sprites.png?v=145e63c0320f

 -- In order to post files to web api the following resource was used.

	https://damienbod.wordpress.com/2014/03/28/web-api-file-upload-single-or-multiple-files/
	http://stackoverflow.com/questions/359894/how-to-create-byte-array-from-httppostedfile
	http://stackoverflow.com/questions/19723064/webapi-formdata-upload-to-db-with-extra-parameters

 -- The google maps implementation used could be found here.

	http://angular-ui.github.io/angular-google-maps/#!/api

 -- To include googles facebook comments in the page the following band aide was needed.

	http://stackoverflow.com/questions/24086301/facebook-comments-plugin-not-displaying-in-angularjs

 -- When resource server is not responding on the staging server backup the development database
	and restore it on the staging server.  Most likely an error is being thrown by code-first
	warning that the models and the database are not in sync.

 -- In order to load facebook components on first page load as opposed to having to reload the page
	to view the facebook components, the following information was used.

	http://stackoverflow.com/questions/23211560/angulajs-facebook-sdk-works-only-when-refresh-the-page
	https://developers.facebook.com/quickstarts/1540766432878939/?platform=web

 -- In order to implement grid style layout the following example was used.

	http://bootsnipp.com/snippets/featured/list-grid-view

 -- To set the ngStyle the following resource was used.

	http://stackoverflow.com/questions/20287241/how-to-set-div-width-using-ng-style

 -- Earth tones used for border shadow of grid layout.

	http://www.varian.net/dreamview/dreamcolor/earth.html

 -- To get the latitudes and longitudes of cities the following code resource can be used
	
	http://jsfiddle.net/YphZw/

 -- Resource on account management with web api 2.2

	http://bitoftech.net/2015/01/21/asp-net-identity-2-with-asp-net-web-api-2-accounts-management/

 -- To add a encode uri filter to angular the following guide was followed.

	http://stackoverflow.com/questions/14512583/how-to-generate-url-encoded-anchor-links-with-angularjs

 -- In order to fix the bug with authentication not working in staging a machine key had to be generated 
	and placed in the web.config.

	http://bitoftech.net/2014/09/24/decouple-owin-authorization-server-resource-server-oauth-2-0-web-api/
	https://support.microsoft.com/en-us/kb/2915218?wa=wsignin1.0

	PowerShell script to generate the machine key.
	# Generates a <machineKey> element that can be copied + pasted into a Web.config file.
	function Generate-MachineKey {
	  [CmdletBinding()]
	  param (
		[ValidateSet("AES", "DES", "3DES")]
		[string]$decryptionAlgorithm = 'AES',
		[ValidateSet("MD5", "SHA1", "HMACSHA256", "HMACSHA384", "HMACSHA512")]
		[string]$validationAlgorithm = 'HMACSHA256'
	  )
	  process {
		function BinaryToHex {
			[CmdLetBinding()]
			param($bytes)
			process {
				$builder = new-object System.Text.StringBuilder
				foreach ($b in $bytes) {
				  $builder = $builder.AppendFormat([System.Globalization.CultureInfo]::InvariantCulture, "{0:X2}", $b)
				}
				$builder
			}
		}
		switch ($decryptionAlgorithm) {
		  "AES" { $decryptionObject = new-object System.Security.Cryptography.AesCryptoServiceProvider }
		  "DES" { $decryptionObject = new-object System.Security.Cryptography.DESCryptoServiceProvider }
		  "3DES" { $decryptionObject = new-object System.Security.Cryptography.TripleDESCryptoServiceProvider }
		}
		$decryptionObject.GenerateKey()
		$decryptionKey = BinaryToHex($decryptionObject.Key)
		$decryptionObject.Dispose()
		switch ($validationAlgorithm) {
		  "MD5" { $validationObject = new-object System.Security.Cryptography.HMACMD5 }
		  "SHA1" { $validationObject = new-object System.Security.Cryptography.HMACSHA1 }
		  "HMACSHA256" { $validationObject = new-object System.Security.Cryptography.HMACSHA256 }
		  "HMACSHA385" { $validationObject = new-object System.Security.Cryptography.HMACSHA384 }
		  "HMACSHA512" { $validationObject = new-object System.Security.Cryptography.HMACSHA512 }
		}
		$validationKey = BinaryToHex($validationObject.Key)
		$validationObject.Dispose()
		[string]::Format([System.Globalization.CultureInfo]::InvariantCulture,
		  "<machineKey decryption=`"{0}`" decryptionKey=`"{1}`" validation=`"{2}`" validationKey=`"{3}`" />",
		  $decryptionAlgorithm.ToUpperInvariant(), $decryptionKey,
		  $validationAlgorithm.ToUpperInvariant(), $validationKey)
	  }
	}

 -- Drop down with autocomplete/typeahead

	http://nya.io/nya-bootstrap-select/#!/examples/live-search

 -- In order to fix a problem that occurs when a dll is missing on the web server I turned off the copy to 
	output directory option for that dll in the dll properties and then published to the server making sure
	to check "remove unnecessary files" in the publish profile.  Then I reenable to the copy to output 
	directory option and republish the project.

 -- In order to fix the bug that was causing DELETE and PUT web actions not to hit the web api in the resource
	server the following answer was implemented.

	http://stackoverflow.com/questions/20125389/iis-7-5-and-web-api-2-put-delete-requests

 -- CORS Guide

	http://www.asp.net/web-api/overview/security/enabling-cross-origin-requests-in-web-api#allowed-origins

 -- Add google image search using the custom search api.

	https://developers.google.com/custom-search/json-api/v1/introduction

 -- Using Bower and Gulp with Visual Studio

	http://blogs.msdn.com/b/cdndevs/archive/2015/02/17/using-bower-with-visual-studio-2013.aspx

 -- In order to modify the Google Custom Search API page url use the following link.

	https://cse.google.com/cse/setup/basic?cx=003278039953552359606%3Az1fmi1jpvfw
	https://developers.google.com/custom-search/json-api/v1/using_rest
	https://developers.google.com/custom-search/json-api/v1/reference/cse/list#response
	https://developers.google.com/custom-search/json-api/v1/overview

 -- In order to get information on Google Maps API Geocoding the following information can be utilized.

	https://developers.google.com/maps/documentation/geocoding/
	https://developers.google.com/maps/documentation/javascript/examples/geocoding-reverse
	https://developers.google.com/maps/documentation/geocoding/?csw=1#geocoding

 -- If a future feature request is for a smarter text search algorithm then perhaps the following resources 
	should be used.
 
	http://rosettacode.org/wiki/Rosetta_Code 
	http://stackoverflow.com/questions/9842188/compare-similarity-algorithms

 -- Google API and API key information.

	https://console.developers.google.com/project/arched-glass-807/apiui/credential?authuser=0
	https://code.google.com/apis/console/b/0/?noredirect#project:915674078507:services

 -- Amazon application server guide.

	http://docs.aws.amazon.com/gettingstarted/latest/wah/getting-started-application-server.html

 -- Set up web deploy guide.

	https://msdn.microsoft.com/en-us/library/vstudio/dd465323(v=vs.100).aspx

 -- In order to make sure ng-cloak runs correctly on large pages the following information was referenced

	http://weblog.west-wind.com/posts/2014/Jun/02/AngularJs-ngcloak-Problems-on-large-Pages#Addtheng-cloakStylesmanually