 -- To enable OAuth2 the following guide was used.

	http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/

 -- After disabling https the website would not work.  This is because the require https attribute 
	([RequireHttps]) has to be disabled.  The below issue and problem resolution identifies a similar problem.

	http://stackoverflow.com/questions/18338368/unable-to-disable-ssl-for-website

 -- Bootstrap theme was downloaded from the below link.

	http://www.bootply.com

 -- Index theme provided by.

	http://www.bootstrapstage.com/agency-start/
	http://startbootstrap.com/template-overviews/agency/

 -- The following guide was used for code-first entity framework setup.

	http://msdn.microsoft.com/en-us/data/jj591621.aspx#model

 -- ngAuthApp: attempt having give off

 -- Dubai photo for cover page.

	http://www.contrib.andrew.cmu.edu/~htasnim/qtraveldoha/img/holidaypackages/dubai-full.jpg
	http://www.contrib.andrew.cmu.edu/~htasnim/qtraveldoha/holidaypackages.html
	http://wallpaperscraft.com/download/beauty_city_dubai_lights_evening_water_58630/3840x1200

 -- For full screen video the following javascript package was used.

	http://bootsnipp.com/snippets/featured/ful-screen-video-background

 -- To create areas the following information was used.

	http://msdn.microsoft.com/en-us/library/ee671793(v=vs.100).aspx

 -- Underscore library to be implemented as per this link.

	https://www.airpair.com/angularjs/posts/top-10-mistakes-angularjs-developers-make

 -- To include the javascript underscore library use the following link.

	https://www.airpair.com/angularjs/posts/top-10-mistakes-angularjs-developers-make

 -- To deep watch a service variable the following implementation was used.

	http://stackoverflow.com/questions/12576798/how-to-watch-service-variables

 -- To get an angular service variable from another variable the following method was used.

	var serviceBase = '';

    dataService.getServerUrl().then(function (resource) {
        serviceBase = resource.authenticationServerUrl;
    });

 -- This website was used to transform json to .net classes

	http://json2csharp.com/

 -- For image file upload with drag and drop interface in Angular the following library was used.

	https://github.com/Wildhoney/ngDroplet

 -- To accept files as a post to a webapi the following information was used.

	http://stackoverflow.com/questions/10320232/how-to-accept-a-file-post-asp-net-mvc-4-webapi

 -- To retrieve jobject from a webapi call the following was used.

	http://blog.travisgosselin.com/web-api-signatures-with-multiple-complex-parameters/

	public IHttpActionResult Post(JObject jObject)
        {
            var thing = jObject["thing"].ToObject<thing>();

            var userName = jObject["userName"].ToObject<string>();

 -- To cascade on delete the following procedure was used. (As of the time of writing this still
	did not work though).

	http://stackoverflow.com/questions/17487577/entity-framework-ef-code-first-cascade-delete-for-one-to-zero-or-one-relations

 -- To fix the self-referencing loop bug the following code was used.

	http://stackoverflow.com/questions/17313632/self-referencing-loop-detected-getting-back-data-from-webapi-to-the-browser

 -- Google API

	https://code.google.com/apis/console/?noredirect&pli=1#project:915674078507:access

 -- ngDroplet was used for the file control in angular.

	https://github.com/Wildhoney/ngDroplet#image-previews

 -- To implement upvote and downvote buttons the following resources were used.

	http://meta.stackexchange.com/questions/57405/total-upvote-and-downvote-counts-are-incorrect

	http://meta.stackexchange.com/content/stackexchangemeta/img/sprites.png?v=145e63c0320f

 -- In order to post files to web api the following resource was used.

	https://damienbod.wordpress.com/2014/03/28/web-api-file-upload-single-or-multiple-files/
	http://stackoverflow.com/questions/359894/how-to-create-byte-array-from-httppostedfile
	http://stackoverflow.com/questions/19723064/webapi-formdata-upload-to-db-with-extra-parameters