{"version":3,"names":[],"mappings":"","sources":["authService.js"],"sourcesContent":["'use strict';\r\napp.factory('authService', ['$http', '$q', 'localStorageService', 'ngAuthSettings', 'dataService', function ($http, $q, localStorageService, ngAuthSettings, dataService) {\r\n\r\n    var serviceBase = ngAuthSettings.apiServiceBaseUri;\r\n\r\n    dataService.getServerUrl().then(function (resource) {\r\n        serviceBase = resource.authenticationServerUrl;\r\n    });\r\n\r\n    var authServiceFactory = {};\r\n\r\n    var _authentication = {\r\n        isAuth: false,\r\n        userName: \"\",\r\n        useRefreshTokens: false\r\n    };\r\n\r\n    var _externalAuthData = {\r\n        provider: \"\",\r\n        userName: \"\",\r\n        externalAccessToken: \"\"\r\n    };\r\n\r\n    var _saveRegistration = function (registration) {\r\n\r\n        _logOut();\r\n\r\n        return $http.post(serviceBase + 'api/account/register', registration).then(function (response) {\r\n            return response;\r\n        });\r\n\r\n    };\r\n\r\n    var _login = function (loginData) {\r\n\r\n        var data = \"grant_type=password&username=\" + loginData.userName + \"&password=\" + loginData.password;\r\n\r\n        if (loginData.useRefreshTokens) {\r\n            data = data + \"&client_id=\" + ngAuthSettings.clientId;\r\n        }\r\n\r\n        var deferred = $q.defer();\r\n\r\n        $http.post(serviceBase + 'token', data, { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }).success(function (response) {\r\n\r\n            if (loginData.useRefreshTokens) {\r\n                localStorageService.set('authorizationData', { token: response.access_token, userName: loginData.userName, refreshToken: response.refresh_token, useRefreshTokens: true });\r\n            }\r\n            else {\r\n                localStorageService.set('authorizationData', { token: response.access_token, userName: loginData.userName, refreshToken: \"\", useRefreshTokens: false });\r\n            }\r\n            _authentication.isAuth = true;\r\n            _authentication.userName = loginData.userName;\r\n            _authentication.useRefreshTokens = loginData.useRefreshTokens;\r\n\r\n            deferred.resolve(response);\r\n\r\n        }).error(function (err, status) {\r\n            _logOut();\r\n            deferred.reject(err);\r\n        });\r\n\r\n        return deferred.promise;\r\n\r\n    };\r\n\r\n    var _logOut = function () {\r\n\r\n        localStorageService.remove('authorizationData');\r\n\r\n        _authentication.isAuth = false;\r\n        _authentication.userName = \"\";\r\n        _authentication.useRefreshTokens = false;\r\n\r\n    };\r\n\r\n    var _fillAuthData = function () {\r\n\r\n        var authData = localStorageService.get('authorizationData');\r\n        if (authData) {\r\n            _authentication.isAuth = true;\r\n            _authentication.userName = authData.userName;\r\n            _authentication.useRefreshTokens = authData.useRefreshTokens;\r\n        }\r\n\r\n    };\r\n\r\n    var _refreshToken = function () {\r\n        var deferred = $q.defer();\r\n\r\n        var authData = localStorageService.get('authorizationData');\r\n\r\n        if (authData) {\r\n\r\n            if (authData.useRefreshTokens) {\r\n\r\n                var data = \"grant_type=refresh_token&refresh_token=\" + authData.refreshToken + \"&client_id=\" + ngAuthSettings.clientId;\r\n\r\n                localStorageService.remove('authorizationData');\r\n\r\n                $http.post(serviceBase + 'token', data, { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }).success(function (response) {\r\n\r\n                    localStorageService.set('authorizationData', { token: response.access_token, userName: response.userName, refreshToken: response.refresh_token, useRefreshTokens: true });\r\n\r\n                    deferred.resolve(response);\r\n\r\n                }).error(function (err, status) {\r\n                    _logOut();\r\n                    deferred.reject(err);\r\n                });\r\n            }\r\n        }\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    var _obtainAccessToken = function (externalData) {\r\n\r\n        var deferred = $q.defer();\r\n\r\n        $http.get(serviceBase + 'api/account/ObtainLocalAccessToken', { params: { provider: externalData.provider, externalAccessToken: externalData.externalAccessToken } }).success(function (response) {\r\n\r\n            localStorageService.set('authorizationData', { token: response.access_token, userName: response.userName, refreshToken: \"\", useRefreshTokens: false });\r\n\r\n            _authentication.isAuth = true;\r\n            _authentication.userName = response.userName;\r\n            _authentication.useRefreshTokens = false;\r\n\r\n            deferred.resolve(response);\r\n\r\n        }).error(function (err, status) {\r\n            _logOut();\r\n            deferred.reject(err);\r\n        });\r\n\r\n        return deferred.promise;\r\n\r\n    };\r\n\r\n    var _registerExternal = function (registerExternalData) {\r\n\r\n        var deferred = $q.defer();\r\n\r\n        $http.post(serviceBase + 'api/account/registerexternal', registerExternalData).success(function (response) {\r\n\r\n            localStorageService.set('authorizationData', { token: response.access_token, userName: response.userName, refreshToken: \"\", useRefreshTokens: false });\r\n\r\n            _authentication.isAuth = true;\r\n            _authentication.userName = response.userName;\r\n            _authentication.useRefreshTokens = false;\r\n\r\n            deferred.resolve(response);\r\n\r\n        }).error(function (err, status) {\r\n            _logOut();\r\n            deferred.reject(err);\r\n        });\r\n\r\n        return deferred.promise;\r\n\r\n    };\r\n\r\n    authServiceFactory.saveRegistration = _saveRegistration;\r\n    authServiceFactory.login = _login;\r\n    authServiceFactory.logOut = _logOut;\r\n    authServiceFactory.fillAuthData = _fillAuthData;\r\n    authServiceFactory.authentication = _authentication;\r\n    authServiceFactory.refreshToken = _refreshToken;\r\n\r\n    authServiceFactory.obtainAccessToken = _obtainAccessToken;\r\n    authServiceFactory.externalAuthData = _externalAuthData;\r\n    authServiceFactory.registerExternal = _registerExternal;\r\n\r\n    return authServiceFactory;\r\n}]);"],"file":"authService.js","sourceRoot":"/source/"}