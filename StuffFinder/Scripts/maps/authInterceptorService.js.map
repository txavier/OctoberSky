{"version":3,"names":[],"mappings":"","sources":["authInterceptorService.js"],"sourcesContent":["'use strict';\r\napp.factory('authInterceptorService', ['$q', '$injector', '$location', 'localStorageService', function ($q, $injector, $location, localStorageService) {\r\n\r\n    var authInterceptorServiceFactory = {};\r\n\r\n    var _request = function (config) {\r\n        // Exception list.\r\n        if (config.url.indexOf(\"maps.googleapis.com\") > 1)\r\n        {\r\n            return config;\r\n        }\r\n\r\n        config.headers = config.headers || {};\r\n\r\n        var authData = localStorageService.get('authorizationData');\r\n        if (authData) {\r\n            config.headers.Authorization = 'Bearer ' + authData.token;\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    var _responseError = function (rejection) {\r\n        if (rejection.status === 401) {\r\n            var authService = $injector.get('authService');\r\n            var authData = localStorageService.get('authorizationData');\r\n\r\n            if (authData) {\r\n                if (authData.useRefreshTokens) {\r\n                    $location.path('/refresh');\r\n                    return $q.reject(rejection);\r\n                }\r\n            }\r\n            authService.logOut();\r\n            $location.path('/login');\r\n        }\r\n        return $q.reject(rejection);\r\n    }\r\n\r\n    authInterceptorServiceFactory.request = _request;\r\n    authInterceptorServiceFactory.responseError = _responseError;\r\n\r\n    return authInterceptorServiceFactory;\r\n}]);"],"file":"authInterceptorService.js","sourceRoot":"/source/"}