{"version":3,"names":[],"mappings":"","sources":["foundItController.js"],"sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    app.controller('foundItController', foundItController);\r\n\r\n    foundItController.$inject = ['$scope', '$log', '$timeout', '$http', '$location', '$routeParams', 'authService', 'dataService'];\r\n\r\n    function foundItController($scope, $log, $timeout, $http, $location, $routeParams, authService, dataService) {\r\n\r\n        var vm = this;\r\n        \r\n        vm.thing = {};\r\n        vm.thing.description = null;\r\n        vm.defaultCoordinates = { latitude: 24.416563, longitude: 54.543546 };\r\n        vm.map = { center: vm.defaultCoordinates, zoom: 12 };\r\n        vm.options = { scrollwheel: false };\r\n        vm.addOrUpdate = addOrUpdate;\r\n        vm.categories = {};\r\n        vm.thing.categoryId = null;\r\n        vm.datepickerFormats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];\r\n        vm.datepickerFormat = vm.datepickerFormats[3];\r\n        vm.datepickerOpen = datepickerOpen;\r\n        vm.datepickerOpened = false;\r\n        vm.datepickerDateOptions = { formatYear: 'yy', startingDay: 1 };\r\n        vm.clear = datepickerClear;\r\n        vm.locations = [];\r\n        vm.finding = { location: { locationName: '' }, date: new Date(), price: null, upcCode: null };\r\n        vm.cities = [];\r\n        vm.searchNewLocation = searchNewLocation;\r\n        var events = {\r\n            places_changed: function (searchBox) { }\r\n        }\r\n        vm.searchbox = { template: 'searchbox.tpl.html', events: events };\r\n\r\n         //Scope variables have to be accessible for the watch statements.\r\n        $scope.coordsUpdates = 0;\r\n        $scope.dynamicMoveCtr = 0;\r\n        $scope.marker = {};\r\n        $scope.marker.coords = {};\r\n        $scope.marker.options = {};\r\n        $scope.marker.coords.latitude = '';\r\n        $scope.marker.coords.longitude = '';\r\n\r\n        activate();\r\n\r\n        function activate() {\r\n            setMapMarker();\r\n            getCategories();\r\n            datepickerToggleMin();\r\n            datepickerToggleMax();\r\n            initiateDroplet();\r\n            getThing();\r\n            getLocations();\r\n            getCities();\r\n\r\n            return vm;\r\n        }\r\n\r\n        function searchNewLocation(locationName) {\r\n            if (locationName.length > 3) {\r\n                dataService.searchNewLocation(locationName, (vm.thing && vm.thing.finding && vm.thing.finding.location && vm.thing.finding.location.city && vm.thing.finding.location.city.name) ? vm.thing.finding.location.city.name : 'dubai').then(function (data) {\r\n                    if (data != null) {\r\n                        if (!vm.thing.finding) {\r\n                            vm.thing.finding = { location: { locationName: '' }, date: new Date(), price: null, upcCode: null };\r\n                        }\r\n                        vm.thing.finding.location = data;\r\n\r\n                        $scope.finding.location = data;\r\n\r\n                        vm.finding.location.city = vm.cities[vm.cities.getIndexBy(\"name\", vm.thing.finding.location.city.name)];\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        \r\n        function getCities() {\r\n            dataService.getCities().then(function (data) {\r\n                vm.cities = data;\r\n\r\n                return vm.cities;\r\n            });\r\n        }\r\n\r\n        function getLocations() {\r\n            dataService.getLocations().then(function (data) {\r\n                vm.locations = data;\r\n            });\r\n        }\r\n\r\n        function getThing() {\r\n            if ($routeParams.thingId) {\r\n                dataService.getThing($routeParams.thingId).then(function (data) {\r\n                    vm.thing = data;\r\n                });\r\n            }\r\n        }\r\n\r\n        function initiateDroplet() {\r\n            $scope.$on('$dropletReady', function whenDropletReady() {\r\n                vm.interface.allowedExtensions(['png', 'jpg', 'bmp', 'gif']);\r\n\r\n                uploadFiles();\r\n            });\r\n        }\r\n\r\n        function uploadFiles() {\r\n            return dataService.getServerUrl().then(function (resource) {\r\n                var serverUrl = resource;\r\n\r\n                vm.interface.setRequestUrl(serverUrl.resourceServerUrl + 'api/thingsApi' + '/files');\r\n            });\r\n        }\r\n\r\n        function getCategories() {\r\n            return dataService.getCategories().then(function (data) {\r\n                vm.categories = data;\r\n                return vm.categories;\r\n            });\r\n        }\r\n\r\n        function addOrUpdate() {\r\n            // If this thing already has a username do not save over it.\r\n            vm.finding.userName = authService.authentication.userName;\r\n            vm.finding.thingId = vm.thing.thingId;\r\n\r\n            dataService.addOrUpdateFinding(vm.finding)\r\n                .then(function (data) {\r\n                    vm.interface.setPostData({ id: data.thingId, userName: authService.authentication.userName });\r\n\r\n                    vm.interface.uploadFiles();\r\n\r\n                    $scope.$apply();\r\n\r\n                    history.back();\r\n                })\r\n                .catch(handleFailure);\r\n        }\r\n\r\n        function handleFailure(error) {\r\n            $log.error('Failure notice.' + error.data.message + \": \" + error.data.messageDetail);\r\n        }\r\n\r\n        // Begin region map.\r\n\r\n        function setMapMarker() {\r\n            $scope.marker = {\r\n                id: 0,\r\n                coords: {\r\n                    latitude: vm.finding.location.latitude ? vm.finding.location.latitude : vm.defaultCoordinates.latitude,\r\n                    longitude: vm.finding.location.latitude ? vm.finding.location.longitude : vm.defaultCoordinates.longitude\r\n                },\r\n                options: { draggable: true },\r\n                events: {\r\n                    dragend: function (marker, eventName, args) {\r\n                        $log.log('marker dragend');\r\n                        var lat = marker.getPosition().lat();\r\n                        var lon = marker.getPosition().lng();\r\n                        $log.log(lat);\r\n                        $log.log(lon);\r\n\r\n                        $http.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat + ',' + lon + '&sensor=false&key=AIzaSyBPUGy5syJHUaDeR_E_FTwgOO4Th8vm63Y')\r\n                        .success(function (response) {\r\n                            if (response.status === \"ZERO_RESULTS\") {\r\n                                vm.finding.location.latitude = lat;\r\n                                vm.finding.location.longitude = lon;\r\n                            }\r\n                            else {\r\n                                vm.finding.location.formattedAddress = response.results[0].formatted_address;\r\n                                vm.finding.location.latitude = lat;\r\n                                vm.finding.location.longitude = lon;\r\n                            }\r\n                        });\r\n\r\n                        $scope.marker.options = {\r\n                            draggable: true,\r\n                            labelContent: \"lat: \" + $scope.marker.coords.latitude + ' ' + 'lon: ' + $scope.marker.coords.longitude,\r\n                            labelAnchor: \"100 0\",\r\n                            labelClass: \"marker-labels\"\r\n                        };\r\n\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        $scope.finding = vm.finding;\r\n        $scope.finding.location.latitude = vm.finding.location.latitude;\r\n\r\n        $scope.$watch('finding.location.locationName', function (current, original) {\r\n            if (_.isEqual(current, original) || !current.latitude) {\r\n                return;\r\n            }\r\n\r\n            if (!vm.locations.getIndexBy(\"locationName\", current.locationName)) {\r\n                return;\r\n            }\r\n\r\n            vm.thing.finding.location = vm.locations[vm.locations.getIndexBy(\"locationName\", current.locationName)];\r\n\r\n            // Set the drop down to the city of the location from the selected\r\n            // city from the typeahead textarea.\r\n            vm.finding.location.city = vm.cities[vm.cities.getIndexBy(\"name\", vm.thing.finding.location.city.name)];\r\n\r\n            $scope.marker.coords.latitude = vm.thing.finding.location.latitude;\r\n            $scope.marker.coords.longitude = vm.thing.finding.location.longitude;\r\n\r\n            vm.map.center.latitude = vm.thing.finding.location.latitude;\r\n            vm.map.center.longitude = vm.thing.finding.location.longitude;\r\n            vm.map.zoom = 12;\r\n        });\r\n\r\n        Array.prototype.getIndexBy = function (name, value) {\r\n            for (var i = 0; i < this.length; i++) {\r\n                if (this[i][name] == value) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n\r\n        $scope.$watchCollection(\"marker.coords\", function (newVal, oldVal) {\r\n            if (_.isEqual(newVal, oldVal))\r\n                return;\r\n            $scope.coordsUpdates++;\r\n        });\r\n\r\n        $scope.finding.location.city = vm.finding.location.city;\r\n\r\n        $scope.$watch('finding.location.city', function (current, original) {\r\n            if (_.isEqual(current, original) || !current) {\r\n                vm.finding.location = {};\r\n                vm.finding.location.locationName = vm.finding.location.locationName || '';\r\n                vm.finding.location.city = original;\r\n                return;\r\n            }\r\n\r\n            $scope.marker.coords.latitude = current.latitude;\r\n            $scope.marker.coords.longitude = current.longitude;\r\n\r\n            vm.map.center.latitude = current.latitude;\r\n            vm.map.center.longitude = current.longitude;\r\n\r\n            vm.finding.location.latitude = current.latitude;\r\n            vm.finding.location.longitude = current.longitude;\r\n\r\n            vm.map.zoom = 12;\r\n        });\r\n\r\n        $timeout(function () {\r\n            //$scope.marker.coords = {\r\n            //    latitude: 42.1451,\r\n            //    longitude: -100.6680\r\n            //};\r\n            $scope.dynamicMoveCtr++;\r\n            $timeout(function () {\r\n                //$scope.marker.coords = {\r\n                //    latitude: 43.1451,\r\n                //    longitude: -102.6680\r\n                //};\r\n                $scope.dynamicMoveCtr++;\r\n            }, 2000);\r\n        }, 1000);\r\n\r\n        // End region map.\r\n\r\n        // Begin region datepicker.\r\n        \r\n        function datepickerClear () {\r\n            vm.thing.finding.date = null;\r\n        };\r\n\r\n        function datepickerToggleMin() {\r\n            vm.datepickerMinDate = vm.datepickerMinDate ? null : new Date(1900, 1, 1);\r\n        };\r\n\r\n        function datepickerToggleMax() {\r\n            vm.datepickerMaxDate = vm.datepickerMaxDate ? null : new Date();\r\n        };\r\n\r\n        function datepickerOpen($event) {\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n\r\n            vm.datepickerOpened = true;\r\n        };\r\n\r\n        // End region datepicker.\r\n    }\r\n\r\n})();"],"file":"foundItController.js","sourceRoot":"/source/"}